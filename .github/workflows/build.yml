name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10

permissions:
    contents: write

jobs:
  build:
    strategy:
      matrix:
        compiler:
        - {
            name: "arm-gnu-toolchain-12.2.rel1-mingw-w64-i686-aarch64-none-elf",
            url: "https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-mingw-w64-i686-aarch64-none-elf.zip"
          }
        # - {
        #     name: "msvc2019"
        #   }

    runs-on: windows-latest
    env:
      libraryName: newlib
      installationPath: newlib-installation
      tagName: 4.4.0.20231231
    steps:
      - shell: cmd
        run: |
          curl ftp://sourceware.org/pub/newlib/${{ env.libraryName }}-${{ env.tagName }}.tar.gz -L -J --output ${{ env.libraryName }}.tar.gz &&^
          tar xzf ${{ env.libraryName }}.tar.gz &&^
          ls

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: make autoconf automake libtool autogen perl
          
      - name: download compiler
        if: ${{  matrix.compiler.url }}
        shell: cmd
        run: |
          curl ${{ matrix.compiler.url }} -L --output compiler &&^
          7z.exe x -y compiler &&^
          ls

      - name: set PATH, check mingw version, cmake generate, build and install
        shell: msys2 {0}
        run: |
            workspace=$(pwd) &&
            export CC=aarch64-none-elf-gcc.exe  &&
            export PATH="$workspace/arm-gnu-toolchain-12.2.rel1-mingw-w64-i686-aarch64-none-elf:$workspace/arm-gnu-toolchain-12.2.rel1-mingw-w64-i686-aarch64-none-elf/bin:$workspace/msys64/usr/bin:/usr/bin" &&
            cd ${{ env.libraryName }}-${{ env.tagName }} && 
            aarch64-none-elf-gcc.exe --version && 
            ( ./configure --target aarch64-none-elf --disable-newlib-supplied-syscalls --prefix="$(pwd)/${{ env.installationPath }}" && make ||  cat config.log ) &&
            echo "done"
            
            
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ env.libraryName }}/${{ env.installationPath }}"
          filename: "${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
        
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.libraryName }}/cmake-build/${{ env.cmakeInstallationPath }}/${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
